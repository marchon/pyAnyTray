"""Generates event.py based on raw data describing the event types"""

def generateEvent(
	name,
	attributes,
	defaults = (),
	attrDocs = (),
	docs = "",
):
	"""Utility function to create event's code from a template and raw data"""
	template = """
%(IDName)s = wxNewEventType()
def %(functionName)s( window, id=-1, function=None, disconnect=0 ):
	"Bind a handler for a %(className)s"
	if disconnect:
		window.Disconnect( id, id, %(IDName)s, function )
	else:
		window.Connect( id, id, %(IDName)s, function )

class %(className)s(%(parentClass)s):
	%(docs)s
	eventType = %(IDName)s
	def __init__( self, windowID, %(argListDefaults)s):
		%(parentClass)s.__init__( self, self.eventType, windowID )
		%(bindAttributes)s
	def Clone( self ):
		"Return a copy of this event"
		return self.__class__( self.GetId(), %(selfArgList)s )

"""
	
	attrDocs = "\n\t\t".join( [ "%s -- %s"%(a,b) for a,b in zip( attributes, attrDocs ) ])
	docs = '''"""%(docs)s
	Attributes:
		%(attrDocs)s
	"""'''%locals()
	className = name+'Event'
	IDName = 'ID_'+name.upper()
	functionName = 'EVT_'+name.upper()
	parentClass = "wxPyCommandEvent"
	argListDefaults = ", ".join(["%s=%s"%( a, repr(b)) for a,b in zip( attributes, defaults)])
	if attributes:
		selfArgList = ", ".join( ["self.%s"%( a) for a in attributes])
		argList = ", ".join( attributes )
		bindAttributes = """%(selfArgList)s = %(argList)s"""%locals()
	else:
		bindAttributes = ""
		selfArgList = ""
	return template%locals()

if __name__ == "__main__":
	file = open( 'events.py','w')
	warning = '''"""Object-oriented events for wxPython
WARNING!  This file is auto-generated by event_gen.py!
Changes will be lost!
"""
from wxPython.wx import *

def send( self, messageType, *arguments, **named ):
	"""Send a new message of the given type from self"""
	self.GetEventHandler().AddPendingEvent(
		messageType(
			self.GetId(),
			*arguments,
			**named
		)
	)
'''
	file.write( warning )

	file.write(generateEvent(
		"AppBarDock",
		("side", "docking", "position", "size"),
		("t",1, (-1,-1),(-1,-1)),
		(
			"The side specifier on which the appbar is docking",
			"Boolean, true if docking, false if un-docking",
			"The new position of the AppBar",
			"The new size of the AppBar",
		),
		"""Event generated when AppBar docks/undocks"""
	))
	file.write(generateEvent(
		"AppBarSystemMessage",
		("wParam", "lParam",),
		(0,0,),
		(
			"""The wParam argument from the windows message
				wParam == 0 == ABN_STATECHANGE
					auto-hide/always-on-top state changed for
					the taskbar
				wParam == 1 == ABN_POSCHANGED
					position changed for the appbar (incl.
					resize window)
				wParam == 2 == ABN_FULLSCREENAPP
				wParam == 3 == ABN_WINDOWARRANGE
					cascade or tile of windows lParam true
					indicates that the windows are being hidden
			""",
			"""The lParam argument from the windows message
				if wParam == 3, this indicates that the windows are
				being hidden ("show desktop")
			""",
		),
		"""Event generated when AppBar recieves a "System" message"""
	))
