"""Object-oriented events for wxPython

WARNING!  This file is auto-generated by event_gen.py!
Changes will be lost!
"""
from wxPython.wx import *

def send( self, messageType, *arguments, **named ):
	"""Send a new message of the given type from self"""
	self.GetEventHandler().AddPendingEvent(
		messageType(
			self.GetId(),
			*arguments,
			**named
		)
	)

ID_APPBARDOCK = wxNewEventType()
def EVT_APPBARDOCK( window, id=-1, function=None, disconnect=0 ):
	"Bind a handler for a AppBarDockEvent"
	if disconnect:
		window.Disconnect( id, id, ID_APPBARDOCK, function )
	else:
		window.Connect( id, id, ID_APPBARDOCK, function )

class AppBarDockEvent(wxPyCommandEvent):
	"""Event generated when AppBar docks/undocks
	Attributes:
		side -- The side specifier on which the appbar is docking
		docking -- Boolean, true if docking, false if un-docking
		position -- The new position of the AppBar
		size -- The new size of the AppBar
	"""
	eventType = ID_APPBARDOCK
	def __init__( self, windowID, side='t', docking=1, position=(-1, -1), size=(-1, -1)):
		wxPyCommandEvent.__init__( self, self.eventType, windowID )
		self.side, self.docking, self.position, self.size = side, docking, position, size
	def Clone( self ):
		"Return a copy of this event"
		return self.__class__( self.GetId(), self.side, self.docking, self.position, self.size )


ID_APPBARSYSTEMMESSAGE = wxNewEventType()
def EVT_APPBARSYSTEMMESSAGE( window, id=-1, function=None, disconnect=0 ):
	"Bind a handler for a AppBarSystemMessageEvent"
	if disconnect:
		window.Disconnect( id, id, ID_APPBARSYSTEMMESSAGE, function )
	else:
		window.Connect( id, id, ID_APPBARSYSTEMMESSAGE, function )

class AppBarSystemMessageEvent(wxPyCommandEvent):
	"""Event generated when AppBar recieves a "System" message
	Attributes:
		wParam -- The wParam argument from the windows message
				wParam == 0 == ABN_STATECHANGE
					auto-hide/always-on-top state changed for
					the taskbar
				wParam == 1 == ABN_POSCHANGED
					position changed for the appbar (incl.
					resize window)
				wParam == 2 == ABN_FULLSCREENAPP
				wParam == 3 == ABN_WINDOWARRANGE
					cascade or tile of windows lParam true
					indicates that the windows are being hidden
			
		lParam -- The lParam argument from the windows message
				if wParam == 3, this indicates that the windows are
				being hidden ("show desktop")
			
	"""
	eventType = ID_APPBARSYSTEMMESSAGE
	def __init__( self, windowID, wParam=0, lParam=0):
		wxPyCommandEvent.__init__( self, self.eventType, windowID )
		self.wParam, self.lParam = wParam, lParam
	def Clone( self ):
		"Return a copy of this event"
		return self.__class__( self.GetId(), self.wParam, self.lParam )

